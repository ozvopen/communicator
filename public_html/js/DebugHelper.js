/*
 * DebugHelper.js creates namespace DebugHelper and DH.
 * Creates draggable HTML #DebugHelper_panel element that allows to:
 * - push answer/question bubble
 * - show/hide tip
 * 
 * Holds #DialogForm_screen > #DialogForm_dialogBubbles scrolled down;
 * Allows usage of #DialogForm_userInput_userQuestionSubmit to submit #userQuestionText from #DialogForm and automatically pushes tipical answer bubble;
 * 
 * DebugHelper uses some lind of diractives in DH.const to make it's usage more convivient. For example, max length of each messege defined in DH.const.bubble_str_max_length. It's 128 by default, and can easily be changed on line 18.
 * 
 * Target form can be accessed with DH.target.self. DH.target also have some useful refs
 */
DebugHelper = DH = {
    NAME: 'DebugHelper',
    VERSION: '1.2',
    const: {
        bubble_str_max_length: 128,
        HTML_struct: {
            target: {
                id: 'DialogForm',
                screen: {
                    id: 'DialogForm_screen',
                    dialogBubbles: {
                        id: 'DialogForm_screen_dialogBubbles'
                    },
                    tip_div: {
                        id: 'DialogForm_screen_tip'
                    }
                },
                userInput: {
                    id: 'DialogForm_userInput',
                    questionText: {
                        id: 'DialogForm_userInput_userQuestionText'
                    },
                    questionSubmit: {
                        id: 'DialogForm_userInput_userQuestionSubmit'
                    }
                }
            },
            stylesheet: {
                nodeName: 'style',
                id: 'DebugHelper_stylesheet',
                type: 'text/css'
            },
            panel: {
                nodeName: 'div',
                id: 'DebugHelper_panel',
                style: {
                    main: 'position:absolute; top: 100px; left:20px; background-color: rgb(245, 245, 220); opacity:0.75; border:1px solid yellow; padding: 10px; -webkit-user-select: none;-moz-user-select: none;-o-user-select: none;-ms-user-select: none;-khtml-user-select: none;user-select: none; z-index: 100;',
                    hover: 'opacity: 1;',
                    active: 'opacity: 0.75'
                },
                header: {
                    nodeMame: 'h5',
                    id: 'DebugHelper_panel_header',
                    text: 'DebugHelper panel',
                    style: {
                        main: 'margin: 0 auto 0.5em; font-size: 12px; color: black;'
                    }
                },
                footer: {
                    nodeName: 'h6',
                    id: 'DebugHelper_panel_footer',
                    text: '',
                    style: {
                        main: 'margin: 0.5em auto 0; font-size: 10px; color: black;'
                    }
                },
                buttons: {
                    push_answer: {
                        nodeName: 'button',
                        id: 'DebugHelper_panel_push_answer_btn',
                        text: 'Push answer',
                        value: 'answer'
                    },
                    push_question: {
                        nodeName: 'button',
                        id: 'DebugHelper_panel_push_question_btn',
                        text: 'Push question',
                        value: 'question'
                    },
                    show_hide_tip: {
                        nodeName: 'button',
                        id: 'DebugHelper_panel_show_hide_tip_btn',
                        text: 'Show/hide tip'
                    }
                }
            },
            outs: {
                bubble: {
                    answer: {
                        text: 'This answer bubble was generated by DebugHelper.js',
                        className: 'bubble answer'
                    },
                    question: {
                        text: 'This question bubble was generated by DebugHelper.js',
                        className: 'bubble question'
                    }

                }
            },
            informationText: {
                nodeName: 'span',
                className: 'verinfo'
            }
        }
    },
    lib: {
        addInfo: function (className) {
            var infoElems = document.getElementsByClassName(className);
            if (infoElems)
            {
                var span = createInfoSpan();
                for (var i = 0; i <= infoElems.length - 1; i++)
                    infoElems[i].appendChild(span);
            }
            function createInfoSpan() {
                var span = document.createElement('span'),
                        infoString = (' Initialized script: ' + DH.NAME + ' v ' + DH.VERSION + '.');

                //Define span class
                span.classList.add(DH.NAME + '_info');

                //Insert information into span
                span.innerHTML = infoString;

                return span;
            }
        },
        generateBubble: function (type, string) {
            var div = document.createElement('div'),
                    span = document.createElement('span');
            type = type.toLowerCase();
            switch (type) {
                case 'answer':
                    div.setAttribute('class', DH.const.HTML_struct.outs.bubble.answer.className);
                    span.setAttribute('class', 'text');
                    //If custom text passed and 
                    if (string)
                        span.innerHTML = string;
                    else
                        //Else print default text
                        span.innerHTML = DH.const.HTML_struct.outs.bubble.answer.text;
                    div.appendChild(span);
                    return div;
                    break;
                case 'question':
                    div = document.createElement('div');
                    div.setAttribute('class', DH.const.HTML_struct.outs.bubble.question.className);
                    span = document.createElement('span');
                    span.setAttribute('class', 'text');
                    //If custom text passed
                    if (string)
                        span.innerHTML = string;
                    else
                        //Else print default text
                        span.innerHTML = DH.const.HTML_struct.outs.bubble.question.text;
                    div.appendChild(span);
                    return div;
                    break;
                default:
                    //If type is unknown
                    var err_str = 'DebugHelper.generate_bubble(): Unknown type argument: ' + type;
                    DH.lib.removeHTMLElement(div);
                    throw new Error(err_str);
                    alert(err_str);
                    break;
            }
        },
        removeHTMLElement: function (HTMLElement) {
            if (HTMLElement.remove)
                HTMLElement.remove();
            else
            if (HTMLElement.parentNode.removeChild)
                HTMLElement.parentNode.removeChild(HTMLElement);
            else
                throw new Error('DH.lib.removeHTMLElement(): can_t use any known method');
        },
        pushBubble: function (type, string) {
            var bubblesParent = DH.target.screen.dialogBubbles,
                    bubble = DH.lib.generateBubble(type, string);

            //Push generated bubble
            bubblesParent.appendChild(bubble);
            //Keep bubblesParent scrolled bottom
            bubblesParent.scrollTop = bubblesParent.scrollHeight;

            return 1;
        },
        preventDefault: function (event) {
            //Expanded function to prevent event default actions cross browser
            event = event || window.event;
            if (event.preventDefault)   // если метод существует
                event.preventDefault();
            else  // вариант IE<9:        
                event.returnValue = false;

        },
        draggable: function (element) {
            element.onmousedown = function (event) {
                event.preventDefault();
                element.clientX = (event.clientX - parseFloat(window.getComputedStyle(element).getPropertyValue('left')));
                element.clientY = (event.clientY - parseFloat(window.getComputedStyle(element).getPropertyValue('top')));
                element.style.cursor = 'move';
                element.onmousemove = function (event) {
                    element.style.left = (event.clientX - element.clientX) + 'px';
                    element.style.top = (event.clientY - element.clientY) + 'px';
                };
            };
            element.onmouseup = function () {
                element.style.cursor = 'default';
                element.onmousemove = function () {
                };
            };

            if (!element.title)
                element.title = 'Draggable';
            else
                element.title += '\n' + 'Draggable';
        },
        generatePanelCSS: function () {
            return ('#' + DH.const.HTML_struct.panel.id + '{' + DH.const.HTML_struct.panel.style.main + '}'
                    + '#' + DH.const.HTML_struct.panel.id + ':hover' + '{' + DH.const.HTML_struct.panel.style.hover + '}'
                    + '#' + DH.const.HTML_struct.panel.id + ':active' + '{' + DH.const.HTML_struct.panel.style.active + '}'
                    + '#' + DH.const.HTML_struct.panel.id + ' button' + '{' + 'display: block; width: 100%; padding: 2px 6px 3px; border: 2px outset buttonface;' + '}'
                    + '#' + DH.const.HTML_struct.panel.header.id + '{' + DH.const.HTML_struct.panel.header.style.main + '}'
                    + '#' + DH.const.HTML_struct.panel.footer.id + '{' + DH.const.HTML_struct.panel.footer.style.main + '}');
        },
        checkInputString: function (string) {
            var defaultString = DH.const.HTML_struct.outs.bubble.question.text;
            //If string is is undefined or not corect, return defaultString
            if (!string || string.toString() === "")
                return defaultString;
            else
            {
                string = string.toString();
                //If string length exceeds max length, cut excess
                if (string.length >= DH.const.bubble_str_max_length)
                    string = string.slice(0, DH.const.bubble_str_max_length - 1);
                //And return checked string
                return string;
            }
        },
        createPanel: function () {
            var panel;

            //Main panel body
            panel = document.createElement(DH.const.HTML_struct.panel.nodeName);
            panel.id = DH.const.HTML_struct.panel.id;
            //Attach panel.screen

            //Panel stylesheet
            panel.stylesheet = document.createElement(DH.const.HTML_struct.stylesheet.nodeName);
            panel.stylesheet.id = DH.const.HTML_struct.stylesheet.id;
            panel.stylesheet.type = DH.const.HTML_struct.stylesheet.type;
            panel.stylesheet.innerHTML = DH.lib.generatePanelCSS();
            panel.appendChild(panel.stylesheet);
            //Panel header
            panel.header = document.createElement(DH.const.HTML_struct.panel.header.nodeMame);
            panel.header.id = DH.const.HTML_struct.panel.header.id;
            panel.header.innerHTML = DH.const.HTML_struct.panel.header.text;
            panel.appendChild(panel.header);

            panel.buttons = new Object();
            //Answer button
            panel.buttons.push_answer = document.createElement(DH.const.HTML_struct.panel.buttons.push_answer.nodeName);
            panel.buttons.push_answer.id = DH.const.HTML_struct.panel.buttons.push_answer.id;
            panel.buttons.push_answer.value = DH.const.HTML_struct.panel.buttons.push_answer.value;
            panel.buttons.push_answer.innerHTML = DH.const.HTML_struct.panel.buttons.push_answer.text;
            panel.buttons.push_answer.onclick = function (event) {
                DH.lib.preventDefault(event);
                DH.lib.pushBubble(panel.buttons.push_answer.value);
            };
            panel.appendChild(panel.buttons.push_answer);
            //Question button
            panel.buttons.push_question = document.createElement(DH.const.HTML_struct.panel.buttons.push_question.nodeName);
            panel.buttons.push_question.id = DH.const.HTML_struct.panel.buttons.push_question.id;
            panel.buttons.push_question.value = DH.const.HTML_struct.panel.buttons.push_question.value;
            panel.buttons.push_question.innerHTML = DH.const.HTML_struct.panel.buttons.push_question.text;
            panel.buttons.push_question.onclick = function (event) {
                DH.lib.preventDefault(event);
                DH.lib.pushBubble(panel.buttons.push_question.value);
            };
            panel.appendChild(panel.buttons.push_question);

            //Tip button
            panel.buttons.show_hide_tip = document.createElement(DH.const.HTML_struct.panel.buttons.show_hide_tip.nodeName);
            panel.buttons.show_hide_tip.id = DH.const.HTML_struct.panel.buttons.show_hide_tip.id;
            panel.buttons.show_hide_tip.innerHTML = DH.const.HTML_struct.panel.buttons.show_hide_tip.text;
            panel.buttons.show_hide_tip.onclick = function (event) {
                DH.lib.preventDefault(event);
                if (DH.target.screen.tip_div.style.display === 'block')
                    DH.target.screen.tip_div.style.display = 'none';
                else
                    DH.target.screen.tip_div.style.display = 'block';
            };
            panel.appendChild(panel.buttons.show_hide_tip);

            //Panel footer
            panel.footer = document.createElement(DH.const.HTML_struct.panel.footer.nodeName);
            panel.footer.id = DH.const.HTML_struct.panel.footer.id;
            panel.footer.innerHTML = ('version ' + DH.VERSION);
            panel.appendChild(panel.footer);

            return panel;
        },
        getTarget: function () {
            return {
                self: document.getElementById(DH.const.HTML_struct.target.id),
                screen: {
                    self: document.getElementById(DH.const.HTML_struct.target.screen.id),
                    dialogBubbles: document.getElementById(DH.const.HTML_struct.target.screen.dialogBubbles.id),
                    tip_div: document.getElementById(DH.const.HTML_struct.target.screen.tip_div.id)
                },
                input: document.getElementById(DH.const.HTML_struct.target.userInput.id)
            };
        },
        holdUserInputControl: function () {
            DH.target.self.onsubmit = function (event) {
                DH.lib.preventDefault(event);
                pushBubbles();
            };
            DH.target.self.userQuestionSubmit.onclick = function (event) {
                DH.lib.preventDefault(event);
                pushBubbles();
            };
            function pushBubbles() {
                var submitString = DH.lib.checkInputString(DH.target.self.userQuestionText.value);
                DH.lib.pushBubble('question', submitString);
                DH.lib.pushBubble('answer');
                DH.target.self.userQuestionText.value = '';
            }
        }
    },
    init: function () {
        //Create DH control panel
        var panel = DH.lib.createPanel();
        //Make it draggable
        DH.lib.draggable(panel);
        //Define DH.panel
        DH.panel = panel;
        window.onload = function () {
            //Append DH control panel to document body
            document.body.appendChild(panel);

            //Define target
            DH.target = DH.lib.getTarget();

            //Take controll of user input
            DH.lib.holdUserInputControl();

            //Print script information in appropriate HTML elems
            DH.lib.addInfo(DH.const.HTML_struct.informationText.className);

            //Set focus on question input
            DH.target.self.userQuestionText.focus();
        };
    }
};

DH.init();